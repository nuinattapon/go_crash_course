// Code generated by sqlc. DO NOT EDIT.
// source: author.sql

package db

import (
	"context"
)

const createAuthor = `-- name: CreateAuthor :exec
INSERT INTO authors (
          name, bio
) VALUES (
  ?, ?
)
`

type CreateAuthorParams struct {
	Name string `json:"name"`
	Bio  string `json:"bio"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) error {
	_, err := q.exec(ctx, q.createAuthorStmt, createAuthor, arg.Name, arg.Bio)
	return err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteAuthorStmt, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int32) (Author, error) {
	row := q.queryRow(ctx, q.getAuthorStmt, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const lastInsertId = `-- name: LastInsertId :one
SELECT LAST_INSERT_ID()
`

func (q *Queries) LastInsertId(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.lastInsertIdStmt, lastInsertId)
	var last_insert_id int64
	err := row.Scan(&last_insert_id)
	return last_insert_id, err
}

const listAuthorID = `-- name: ListAuthorID :many
SELECT id FROM authors
ORDER BY id LIMIT ?
`

func (q *Queries) ListAuthorID(ctx context.Context, limit int32) ([]int32, error) {
	rows, err := q.query(ctx, q.listAuthorIDStmt, listAuthorID, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name LIMIT ? OFFSET ?
`

type ListAuthorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAuthors(ctx context.Context, arg ListAuthorsParams) ([]Author, error) {
	rows, err := q.query(ctx, q.listAuthorsStmt, listAuthors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rowsAffected = `-- name: RowsAffected :one
SELECT ROW_COUNT()
`

func (q *Queries) RowsAffected(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.rowsAffectedStmt, rowsAffected)
	var row_count int64
	err := row.Scan(&row_count)
	return row_count, err
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE authors set name = ?, bio = ? WHERE id = ?
`

type UpdateAuthorParams struct {
	Name string `json:"name"`
	Bio  string `json:"bio"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.exec(ctx, q.updateAuthorStmt, updateAuthor, arg.Name, arg.Bio, arg.ID)
	return err
}
